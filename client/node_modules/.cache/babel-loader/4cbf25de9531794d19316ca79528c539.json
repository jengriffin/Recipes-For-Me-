{"ast":null,"code":"// //import axios from 'axios'\n// export const BASE_URL = 'http://localhost:3001'\n// //const Client = axios.create({ baseURL: BASE_URL })\n// // Intercepts every request axios makes\n// Client.interceptors.request.use(\n//   (config) => {\n//     // Reads the token in localStorage\n//     const token = localStorage.getItem('token')\n//     // if the token exists, we set the authorization header\n//     if (token) {\n//       config.headers['authorization'] = `Bearer ${token}`\n//     }\n//     return config // We return the new config if the token exists or the default config if no token exists.\n//     // Provides the token to each request that passes through axios\n//   },\n//   (error) => Promise.reject(error)\n// )\n// export default Client","map":{"version":3,"names":[],"sources":["/Users/jennifergriffin/ga_seir/projects/Recipes-For-Me-/client/src/services/api.js"],"sourcesContent":["// //import axios from 'axios'\n\n// export const BASE_URL = 'http://localhost:3001'\n\n// //const Client = axios.create({ baseURL: BASE_URL })\n\n// // Intercepts every request axios makes\n// Client.interceptors.request.use(\n//   (config) => {\n//     // Reads the token in localStorage\n//     const token = localStorage.getItem('token')\n//     // if the token exists, we set the authorization header\n//     if (token) {\n//       config.headers['authorization'] = `Bearer ${token}`\n//     }\n//     return config // We return the new config if the token exists or the default config if no token exists.\n//     // Provides the token to each request that passes through axios\n//   },\n//   (error) => Promise.reject(error)\n// )\n\n// export default Client\n"],"mappings":"AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}