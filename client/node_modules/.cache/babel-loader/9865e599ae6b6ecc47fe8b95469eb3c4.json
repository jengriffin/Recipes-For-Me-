{"ast":null,"code":"//import axios from 'axios'\nexport const BASE_URL = 'http://localhost:3001'; //const Client = axios.create({ baseURL: BASE_URL })\n// Intercepts every request axios makes\n\nClient.interceptors.request.use(config => {\n  // Reads the token in localStorage\n  const token = localStorage.getItem('token'); // if the token exists, we set the authorization header\n\n  if (token) {\n    config.headers['authorization'] = `Bearer ${token}`;\n  }\n\n  return config; // We return the new config if the token exists or the default config if no token exists.\n  // Provides the token to each request that passes through axios\n}, error => Promise.reject(error));\nexport default Client;","map":{"version":3,"names":["BASE_URL","Client","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject"],"sources":["/Users/jennifergriffin/ga_seir/projects/Recipes-For-Me-/client/src/services/api.js"],"sourcesContent":["//import axios from 'axios'\n\nexport const BASE_URL = 'http://localhost:3001'\n\n//const Client = axios.create({ baseURL: BASE_URL })\n\n// Intercepts every request axios makes\nClient.interceptors.request.use(\n  (config) => {\n    // Reads the token in localStorage\n    const token = localStorage.getItem('token')\n    // if the token exists, we set the authorization header\n    if (token) {\n      config.headers['authorization'] = `Bearer ${token}`\n    }\n    return config // We return the new config if the token exists or the default config if no token exists.\n    // Provides the token to each request that passes through axios\n  },\n  (error) => Promise.reject(error)\n)\n\nexport default Client\n"],"mappings":"AAAA;AAEA,OAAO,MAAMA,QAAQ,GAAG,uBAAjB,C,CAEP;AAEA;;AACAC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BC,GAA5B,CACGC,MAAD,IAAY;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CAFU,CAGV;;EACA,IAAIF,KAAJ,EAAW;IACTD,MAAM,CAACI,OAAP,CAAe,eAAf,IAAmC,UAASH,KAAM,EAAlD;EACD;;EACD,OAAOD,MAAP,CAPU,CAOI;EACd;AACD,CAVH,EAWGK,KAAD,IAAWC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAXb;AAcA,eAAeT,MAAf"},"metadata":{},"sourceType":"module"}